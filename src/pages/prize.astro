---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { marked } from 'marked';
import { renderer } from '@helpers/marked';
import { get_item_icon } from '@helpers/eve_image_server'
import { get_user_prizes } from '@helpers/api.fanfest/code'
import type { Prize, UserPrizes } from '@dtypes/api.fanfest'

const prize = JSON.parse(Astro.url.searchParams.get('prize') as string) as Prize

let user_prizes:UserPrizes | null = null

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false

try {
    user_prizes = auth_token ? await get_user_prizes(auth_token) : null
} catch (error) {
    console.log(error)
}

const IBN_CHARACTER_ID = 1978535095

import PilotName from '@components/blocks/PilotName.astro'
import { experimental_AstroContainer as AstroContainer } from 'astro/container';

const container = await AstroContainer.create();
const ibn_modal = await container.renderToString(PilotName,  {
	props: {
		character_id: IBN_CHARACTER_ID,
		character_name: 'Ibn Khatab',
	},
})

const delivery_details = (marked.parseInline(t('delivery_details')) as string).replace('Ibn Khatab', ibn_modal)

import { get_player_icon } from '@helpers/eve_image_server'

import PageLanding from '@components/page/PageLanding.astro';

const page_title = t('index.page_title');

import Default from '@layouts/Default.astro';

import TextBox from '@components/layout/TextBox.astro';

import FixedFluid from '@components/compositions/FixedFluid.astro';
import Flexblock from '@components/compositions/Flexblock.astro';
import Wrapper from '@components/compositions/Wrapper.astro';

import CorporationBadge from '@components/blocks/CorporationBadge.astro';
import Badge from '@components/blocks/Badge.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
---

<Default title={page_title}>
	<PageLanding
        fullscreen={true}
        wide={true}
        neocom={false}
    >
		<Wrapper
			class="[ content-section ][ min-h-[100vh] max-w-[48rem] ]"
			centered={true}
			padding_block='0'
			padding_inline='0'
            x-data={`{
                toggle_image: false,
                init() {
                    setTimeout(() => {
                        launch_confetti();
                        this.toggle_image = true
                    }, 6000)
                }
            }`}
            neocom={false}
		>
			<Flexblock centered={true} class="[ text-center relative pb-[45px] ]" gap='var(--space-xl)'>
				<img
                    class="[ container ]"
                    src="/images/container.png"
                    width="626"
                    height="465"
                    x-show="!toggle_image"
                />

                <Flexblock
                    class="[ prize ][ animate-bounce-fade-in animate-duration-faster ]"
                    centered={true}    
                    x-show="toggle_image"
                >
                    <picture>
                        <img
                            src={get_item_icon(prize.id, 512, true)}
                            width="256"
                            height="256"
                            alt={`${prize.name} icon`}
                        />
                    </picture>
                    <span>{prize.qty} &times; {prize.name}</span>
                </Flexblock>
				
				<TextBox>
                    <p x-show="!toggle_image" class="[ animate-fade-in animation-delay-1000 ]">{t('prize_text')}</p>
				    <Flexblock
                        class="[ hidden ]"
                        x-bind:class="{ flex: toggle_image, hidden: !toggle_image }"
                        centered={true}
                        gap='var(--space-xl)'
                    >
                        <Flexblock centered={true} gap='var(--space-s)'>
                            <h3 class="[ animate-fade-in animation-delay-1000 ]">{t('congratulation_text')}</h3>
                            <p class="[ animate-fade-in animation-delay-2000 ]" set:html={delivery_details} />
                        </Flexblock>

                        {user_prizes &&
                            <FixedFluid
                                class="[ items-center animate-fade-in animation-delay-3000 ]"
                                width='64px'
                            >
                                <picture class="[ character-picture ]">
                                    <img
                                        loading="lazy"
                                        height={64}
                                        width={64}
                                        src={get_player_icon(parseInt(user_prizes.char.id), 64)}
                                        alt={`${t('profile_picture_of')} ${user_prizes.char.name ?? t('unknown_character')}`}
                                    />
                                </picture>
                                <Flexblock gap='var(--space-3xs)'>
                                    <PilotName
                                        character_id={parseInt(user_prizes.char.id)}
                                        character_name={user_prizes.char.name}
                                        size='lg'
                                    />
                                    <CorporationBadge
                                        corporation={{
                                            id: user_prizes.corp.id,
                                            name: user_prizes.corp.name,
                                            size: 'sm'
                                        }}
                                    />
                                </Flexblock>
                            </FixedFluid>
                        }
        
                        {user_prizes?.prizes.length > 0 &&
                            <Flexblock class="[ animate-fade-in animation-delay-3000 ]">
                                <h4>{t('other_character_prizes')}</h4>
                                <FlexInline>
                                    {user_prizes.prizes.map(prize =>
                                        <Badge title={`${prize.qty} Ã— ${prize.name}`} image={get_item_icon(parseInt(prize.id), 64, true)}></Badge>
                                    )}
                                </FlexInline>
                            </Flexblock>
                        }

                        <small class="[ animate-fade-in animation-delay-4000 ]" set:html={marked.parseInline(t('about_text'), { renderer })} />
                </TextBox>
			</Flexblock>
		</Wrapper>
	</PageLanding>
</Default>

<style lang="scss">
	.container {
		max-height: 70vh;
		width: auto;
		height: auto;
        image-rendering: pixelated;
		animation: zoom_in cubic-bezier(0.390, 0.575, 0.565, 1.000) both 6s;
		animation-iteration-count: 1;
		animation-delay: 1s;
		animation-fill-mode: forwards;
	}

    @keyframes zoom_in {
        from {
            transform: scale(1);
            opacity: 1;
        }
        
        to {
            transform: scale(1.2);
            opacity: 0;
        }
    }

    .prize {
		width: auto;
		height: auto;

        picture {
            background-color: var(--highlight);
        }

        img {
            mix-blend-mode: hard-light;
        }

        span {
            font-size: var(--step-4);
        }
    }

	a {
		font-family: var(--heading-font);
		font-size: var(--step-5);
		text-transform: uppercase;
	}

    .code {
        font-size: 48px;
        max-width: 50px;
        padding: var(--space-3xs);
        text-align: center;
        line-height: 0px;
        text-transform: uppercase;
    }
</style>